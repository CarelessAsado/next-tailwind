- how to handle tailwind code more dynamically, avoid repeating code eberywhere
- make a tiny backend db/route and consume it with the API folder


- error wrapper in API folder NEXT (global error handling parece ser un poco + complicado, xq a todos les gusta tener en consideracion el método del handler, no tiene mucho sentido pero creo q capaz comprendo de donde viene, de todas maneras, agregar dificultad al handler, y casi todos los ejs q vi lo tienen en consideracion, asi q lo dejamos p/el final)
- de todas maneras un flaco dice q Next.js has default error handling built-in, If you throw in an API route (or await on a Promise that rejects) and you don't catch the exception in your code then Next will catch it, print it to stderr and respond with status 500'

13/1/23:
- continue tests
- avoid input / objecttype duplication / quitar ...Rest,typname deestructuring
- test updateCbox (async?? cbox value depends on the result returned)
- test DELETE and POST

- auth

protect routes => on Client side redirect to login
login => modify context accordingly (see @Authorized typegraphql + how to type and access context)
https://typegraphql.com/docs/middlewares.html
@MiddleWare
- can I use useQuery in getServerSideProps?
- yaml prod and dev schema url, check if I can use .env

- probar borrar el paquete dev q instalé typescript
- general error handler
- HUSKY

12/1/23:
- mutation: DELETE ✅
check sendStatus(204) on GRAPHQL ✅
- APOLLO MOCKEDPROVIDER ✅
- check if just wrapping ApolloProvider and client the test works (IT DOESNT: "fetch" has not been found globally and no fetcher has been configured. I can try to find a hacky solution, but we'll use MockedProvider)
- type apollo mocked provider ✅ (u import MockedResponse utility type, and u pass your Query type)
- POST added to the form ✅
- probar borrar ts-node ✅ (al hacer npm run code-gen me salta "falta ts-node", pero creo q es error en el tipado, usar el graphql server p/autocompletado) 
- updateMutation ✅

11/1/23:
    - query with args ✅
    - dynamic route/page for single task ✅
    - make mutation (CREATE) ✅

//https://nhost.io/blog/how-to-use-graphql-code-generator-with-react-and-apollo
https://www.apollographql.com/docs/react/get-started
9/1/23:
- graphql, end to end typesafety ✅
- use the generated types instead of handmade interfaces ✅
- make request on client side ✅

3/1/23: mongoose connection ✅

- read ✅, create ✅ 
- absolute imports ✅ 

5/1/23:
- Basic JEST test the form ✅
- loading state TEST ✅
- APOLLO 101

- informally displaying tasks + delete
- react hook form
- testing ENDPOINTS (happy path)



- add error + test
-add axios
- axios baseUrl, interceptors
- auth eventually
